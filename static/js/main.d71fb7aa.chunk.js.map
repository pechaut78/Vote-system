{"version":3,"sources":["helpers/getWeb3.js","Components/Connexion.js","Components/NotFound.js","helpers/modals.js","helpers/VotingHelper.js","Components/VoterInterface.js","Components/AdminInterface.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","a","window","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","Connexion","state","pseudo","password","gotoAdmin","gotoClientAddress","changePseudo","event","setState","target","value","changePassword","route","preventDefault","props","setIsAdmin","setIsConnected","this","push","to","className","style","width","marginTop","onSubmit","id","placeholder","type","required","defaultValue","onChange","Component","NotFound","openModal","refer","display","classList","add","closeModal","remove","registerVoter","contract","account","address","successFunc","errorFunc","methods","send","from","then","val","err","getStatus","res","call","endProposalRegistration","startProposalRegistration","startVotingSession","endVotingSession","endVotingCount","submitProposal","txt","getProposal","indx","getProposalNb","voteFor","getWinningProposition","VoterInterface","_ContractStatus","_address","_Winner","_ProposalCount","busyHide","_operationModal","errorDisplay","alert","message","registerEventStatus","_contract","events","WorkflowStatusChange","on","returnValues","newStatus","GetWinner","ProposalRegistered","updateProposalList","nb","_Proposals","i","SubmitProposal","proposal","document","getElementById","_accounts","VoteFor","parseInt","v","getScreen","s","onClick","min","max","renderProposal","person","index","key","toString","getPropositionList","scope","map","match","params","initModal","_getWeb3","getWeb3Cnx","loop","result","_web3","initContract","initAccounts","tabIndex","role","withRouter","AdminInterface","_voteResult","getVothingResult","VotesTallied","RegisterVoter","StartProposalRegistration","EndProposalRegistration","StartVotingSession","EndVotingSession","EndVotingCount","changeAdress","isConnected","isAdmin","param","analyzeStatus","pkg","require","App","error","eth","getAccounts","accounts","net","getId","networkId","VotingContract","networks","deployedNetwork","Contract","abi","storageValue","basename","rootPath","exact","path","component","Boolean","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d71fb7aa.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 =  () =>\n  new Promise(async(resolve, reject) => {\n      // Modern dapp browsers...\n    if (window.ethereum) {\n      const web3 = new Web3(window.ethereum);\n      \n      try {\n        // Request account access if needed\n        await window.ethereum.enable();\n        // Accounts now exposed\n        resolve(web3);\n      } catch (error) {\n        reject(error);\n      }\n    }\n    // Legacy dapp browsers...\n    else if (window.web3) {\n      // Use Mist/MetaMask's provider.\n      const web3 = window.web3;\n      console.log(\"Injected web3 detected.\");\n      resolve(web3);\n    }\n    // Fallback to localhost; use dev console port by default...\n    else {\n      const provider = new Web3.providers.HttpProvider(\n        \"http://127.0.0.1:8545\"\n      );\n      const web3 = new Web3(provider);\n      console.log(\"No web3 instance injected, using Local web3.\");\n      resolve(web3);\n    }\n  });\n  \n\nexport default getWeb3;\n","import React, { Component, Fragment } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\n\r\n\r\nclass Connexion extends Component\r\n{\r\n    state = {\r\n        pseudo:\"admin\",\r\n        password:\"\",\r\n        gotoAdmin:false,\r\n        gotoClientAddress:false\r\n    }            \r\n    changePseudo = event=> {this.setState({pseudo:event.target.value})        }\r\n    changePassword = event => { this.setState({password:event.target.value})}\r\n    \r\n    route = event => {        \r\n        event.preventDefault()\r\n        const {setIsAdmin,setIsConnected} = this.props\r\n\r\n        if(this.state.pseudo===\"admin\") \r\n        {\r\n            setIsAdmin(true)\r\n            setIsConnected(true)\r\n            this.setState({gotoAdmin:true})\r\n        }\r\n        else\r\n        {\r\n            setIsAdmin(false)\r\n            setIsConnected(true)\r\n            this.setState({gotoClientAddress:true})\r\n        }\r\n        \r\n    }\r\n\r\n    changPage\r\n    render() {        \r\n        if(this.state.gotoClientAddress)            \r\n            return <Redirect push to={`/pseudo/${this.state.pseudo}`}></Redirect>\r\n        \r\n        if(this.state.gotoAdmin)        \r\n            return <Redirect push to={`/admin`}></Redirect>\r\n        \r\n\r\n        return (\r\n\r\n        <Fragment>\r\n            <nav className=\"navbar navbar-dark bg-dark\">\r\n  \r\n            </nav>\r\n            <div  className=\"card mx-auto\" style={{width: '20%', marginTop: 50}}>\r\n            <div className=\"card-body\">\r\n            <form onSubmit= {this.route} id='signing'>\r\n                <div className=\"mb-3\">\r\n                    <h5 className=\"card-title\">Adresse</h5>\r\n                    <input placeholder='Pseudo' className=\"form-control\" type='text ' id=\"login\" required defaultValue={this.state.pseudo} onChange={this.changePseudo} />\r\n                    <div id=\"emailHelp\" className=\"form-text\">Adresse a utiliser pour les interactions</div>\r\n                </div>\r\n                <button type='submit' className=\"btn btn-primary\">Login</button>\r\n            </form>\r\n            </div>\r\n            </div>\r\n        </Fragment>\r\n       )\r\n    }\r\n}\r\nexport default Connexion","import React from \"react\";\r\n\r\nconst NotFound = () => (\r\n    <p>Page non Trouvee</p>\r\n)\r\n\r\nexport default NotFound","function openModal(refer) {\r\n    refer.style.display = \"block\"\r\n    refer.classList.add(\"show\")\r\n}\r\nfunction closeModal(refer) {\r\n    refer.style.display = \"none\"\r\n    refer.classList.remove(\"show\")\r\n}\r\n\r\nexport {openModal, closeModal}","const registerVoter = async(contract,account, address, successFunc, errorFunc) => {\r\n    try\r\n    {\r\n        contract.methods.registerVoter(address).send({from:account}).then(\r\n            (val) => {successFunc()},\r\n            (err) => {errorFunc(err)}\r\n        )\r\n    }\r\n    catch(err)  {errorFunc(err)}       \r\n}\r\n\r\nconst getStatus =  async(contract, errorFunc) => {\r\n    let res=null\r\n    try\r\n    {\r\n        res = await contract.methods.getStatus().call()\r\n    }\r\n    catch(err)  {errorFunc(err)}   \r\n\r\n    return res\r\n}\r\n\r\nconst endProposalRegistration =  async(contract,account, successFunc, errorFunc) => {\r\n    try\r\n    {\r\n        contract.methods.endProposalRegistration().send({from:account}).then(\r\n            (val) => {successFunc()},\r\n            (err) => {errorFunc(err)}\r\n        )\r\n    }\r\n    catch(err)  {errorFunc(err)}       \r\n\r\n}\r\n\r\nconst startProposalRegistration=  async(contract,account, successFunc, errorFunc) => {\r\n    try\r\n    {\r\n        contract.methods.startProposalRegistration().send({from:account}).then(\r\n            (val) => {successFunc()},\r\n            (err) => {errorFunc(err)}\r\n        )\r\n    } catch(err)  {errorFunc(err)}       \r\n}\r\n\r\nconst startVotingSession=  async(contract,account, successFunc, errorFunc) => {\r\n    try\r\n    {\r\n        contract.methods.startVotingSession().send({from:account}).then(\r\n            (val) => {successFunc()},\r\n            (err) => {errorFunc(err)}\r\n        )\r\n    } catch(err)  {errorFunc(err)}\r\n}\r\nconst endVotingSession=  async(contract,account, successFunc, errorFunc) => {\r\n    try\r\n    {\r\n         contract.methods.endVotingSession().send({from:account}).then(\r\n            (val) => {successFunc()},\r\n            (err) => {errorFunc(err)}\r\n        )\r\n    } catch(err)  {errorFunc(err)}\r\n}\r\n\r\nconst endVotingCount=  async(contract,account, successFunc, errorFunc) => {\r\n    try\r\n    {\r\n         contract.methods.endVotingCount().send({from:account}).then(\r\n            (val) => {successFunc()},\r\n            (err) => {errorFunc(err)}\r\n        )\r\n    } catch(err)  {errorFunc(err)}\r\n}\r\n\r\nconst submitProposal=  async(contract,txt,account, successFunc, errorFunc) => {\r\n    try\r\n    {\r\n         contract.methods.submitProposal(txt).send({from:account}).then(\r\n            (val) => {successFunc()},\r\n            (err) => {errorFunc(err)}\r\n        )\r\n    } catch(err)  {errorFunc(err)}\r\n}\r\n\r\nconst getProposal=  async(contract,indx) => { \r\n    let res = await contract.methods.getProposal(indx).call()\r\n    return res\r\n}\r\nconst getProposalNb=  async(contract) => {\r\n    let res = await contract.methods.getProposalNb().call()\r\n    return res\r\n}\r\nconst voteFor=  async(contract,indx,account, successFunc, errorFunc) => {    \r\n    try\r\n    {\r\n         contract.methods.voteFor(indx).send({from:account}).then(\r\n            (val) => {successFunc()},\r\n            (err) => {errorFunc(err)}\r\n        )\r\n    } catch(err)  {errorFunc(err)}\r\n}\r\n\r\nconst getWinningProposition=  async(contract,  errorFunc) => {\r\n    let res =\"\"\r\n    try\r\n    {\r\n        res =  await contract.methods.getWinningProposition().call()\r\n        return res\r\n    } catch(err)  {\r\n        errorFunc(err)\r\n        return res\r\n    }\r\n}\r\n\r\n\r\nexport  {\r\n    registerVoter,\r\n    getStatus,\r\n    endProposalRegistration,\r\n    startProposalRegistration,\r\n    startVotingSession,\r\n    endVotingSession,\r\n    endVotingCount,\r\n    submitProposal,\r\n    getProposal,\r\n    voteFor,\r\n    getWinningProposition,\r\n    getProposalNb\r\n\r\n};","import React, { Component, Fragment } from \"react\";\r\nimport { withRouter } from 'react-router-dom'\r\nimport {openModal,closeModal} from \"../helpers/modals.js\"\r\nimport {getStatus, voteFor,\r\n        getProposal,getProposalNb,submitProposal,getWinningProposition} from \"../helpers/VotingHelper.js\"\r\nclass VoterInterface extends Component\r\n{\r\n    state = {\r\n         _ContractStatus:-1,\r\n        _address:\"\",\r\n        _Winner:\"\",\r\n        _ProposalCount:0\r\n    }\r\n\r\n    // Variables\r\n    _operationModal:null\r\n    _web3:null\r\n    _accounts:null\r\n    _Proposals:null\r\n\r\n\r\n    // Modal Utilities\r\n    busyHide = () => {        \r\n        closeModal(this._operationModal)\r\n    }    \r\n    errorDisplay = (err) => {\r\n        alert(err.message)        \r\n        this.busyHide()\r\n    }\r\n\r\n    // Register to the events we want to catch\r\n    registerEventStatus = async () =>\r\n    {\r\n       // Listen to the contract changig its status \r\n       this._contract.events.WorkflowStatusChange().on(\"data\", (event) => { \r\n           this.setState({_ContractStatus:event.returnValues.newStatus})\r\n            this.GetWinner()\r\n        });\r\n        \r\n        // For this event we do something special: we force the update of the list displayed on screen\r\n        this._contract.events.ProposalRegistered().on(\"data\", (event) => { \r\n                this.updateProposalList()                 \r\n        });\r\n    }\r\n\r\n\r\n\r\n    async componentDidMount() {\r\n       \r\n       this.setState({_address:this.props.match.params.pseudo})\r\n       var initModal = document.getElementById('initModal')       \r\n       this._operationModal = document.getElementById('waitingOperation')\r\n       \r\n       // Display a modal window while we do operations\r\n       openModal(initModal)\r\n\r\n        \r\n        var _getWeb3 = this.props.getWeb3Cnx\r\n        var  result,loop=true\r\n        // We loop so the site is not accessible until everything is set properly\r\n        while(loop)\r\n        {\r\n            // getWeb3 comes from App\r\n            result= await _getWeb3()\r\n            if(result.err===null)\r\n            {\r\n                loop=false\r\n                this._web3=result.web3\r\n            }\r\n            else{ alert(\"La connexion a echouee, nous retentons.\")}\r\n        }\r\n        \r\n        \r\n        loop = true\r\n        while(loop)\r\n        {\r\n            result= await this.props.initContract()\r\n            if(result.err===null)\r\n            {\r\n                this._contract = result.contract \r\n                loop = false\r\n            }\r\n            else{alert(\"Connexion au contrat impossible, nous retentons\")}\r\n        }    \r\n        \r\n        // On récupère l'état du contrat pour conditionner l'affichage\r\n        this.setState({_ContractStatus: await getStatus(this._contract,this.errorDisplay)})    \r\n        this._accounts = await this.props.initAccounts()\r\n        this.registerEventStatus()\r\n\r\n        //  On récupère la liste des propositions - Si faites\r\n        this.updateProposalList()\r\n        // On récupère le gagnant\r\n        this.GetWinner()\r\n        closeModal(initModal)\r\n    }\r\n\r\n    updateProposalList = async () => {\r\n        \r\n        // On récupère le nombre de propositions\r\n        let nb = await getProposalNb(this._contract)\r\n        this._Proposals = []\r\n        // Pour chaque indx on retourne la prop. correspondante \r\n        for(let i=0;i<nb;i++)\r\n        {\r\n            console.log(i)\r\n            this._Proposals.push(await getProposal(this._contract,i))\r\n        }\r\n        this.setState({_ProposalCount:nb})   \r\n    }\r\n\r\n    // Send a proposal to the contract\r\n    SubmitProposal = async () =>\r\n    {\r\n        openModal(this._operationModal)\r\n        var proposal = document.getElementById('proposal').value \r\n        await submitProposal(this._contract,proposal,this._accounts[0],this.busyHide,this.errorDisplay)\r\n    }\r\n\r\n    // Vote for Index\r\n    VoteFor = async () =>\r\n    {\r\n        openModal(this._operationModal)\r\n        var proposal = parseInt(document.getElementById('voteNB').value) \r\n        await voteFor(this._contract,proposal,this._accounts[0],this.busyHide,this.errorDisplay)\r\n    }\r\n    // Get The winnet proposition - only if counting has been done\r\n    GetWinner = async () =>{\r\n            if(this.state._ContractStatus===\"5\")\r\n            {                                \r\n                let v = await getWinningProposition(this._contract,this.errorDisplay) \r\n                this.setState({_Winner:v})       \r\n            }\r\n    }\r\n    // Depending on the status, gives the correct interface\r\n    getScreen = () =>\r\n    {\r\n\r\n        let s = parseInt(this.state._ContractStatus)\r\n        if(s===1) { //ProposalsRegistrationStarted\r\n        return (\r\n            <Fragment>            \r\n            <div  className=\"card mx-auto\" style={{width: '28%', marginTop: 50}}>\r\n            <div className=\"card-body\">\r\n            <h5 className=\"card-title\">Proposition</h5>\r\n            <div className=\"input-group\">         \r\n                <input placeholder='Texte a soumettre' className=\"form-control\" type='text ' id=\"proposal\" required  />\r\n                <button onClick={this.SubmitProposal} className=\"btn btn-primary\" >Soumettre</button>\r\n            </div>\r\n            </div>\r\n            </div>\r\n            </Fragment>\r\n            )\r\n        }\r\n        if (s===3) { //VotingSessionStarted\r\n        return (\r\n            <Fragment>            \r\n            <div  className=\"card mx-auto\" style={{width: '28%', marginTop: 50}}>\r\n            <div className=\"card-body\">\r\n            <h5 className=\"card-title\">Voter Pour:</h5>\r\n            <div className=\"input-group\">         \r\n                <input placeholder='Index de proposition' className=\"form-control\" type='number' min=\"0\" max=\"${this.state._ProposalCount}\" id=\"voteNB\" required  />\r\n                <button onClick={this.VoteFor} className=\"btn btn-primary\" >Voter pour</button>\r\n            </div>\r\n            </div>\r\n            </div>\r\n            </Fragment>\r\n            )\r\n        }\r\n        if(s===-1) return(<p>Initialisation</p>)        // Web3, contract not yet initialized\r\n        if(s===5) return(<div><p>Resultat du vote: </p><p>{this.state._Winner}</p></div>) // VotesTallied\r\n        return(<p>Session de Vote non ouverte</p>)\r\n\r\n             \r\n    }\r\n\r\n    // Render a list Element\r\n    renderProposal = (person, index) => {\r\n    return (\r\n        <tr key={index.toString()}>\r\n        <td>{index}</td>\r\n        <td>{person}</td>\r\n        </tr>\r\n    )\r\n    }\r\n\r\n    // Construct the list of propositions\r\n    getPropositionList = () => {\r\n        if(this.state._ProposalCount>0)\r\n        {\r\n            return (\r\n                <table className=\"table table-bordered\" >\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">#</th>\r\n                            <th scope=\"col\">Proposition</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody> \r\n                        {this._Proposals.map(this.renderProposal)}\r\n                    </tbody>\r\n                </table>\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n    render()\r\n    {\r\n\r\n\r\n        return (\r\n            <Fragment>\r\n                 \r\n            {this.getPropositionList()}\r\n            {this.getScreen()}\r\n\r\n            \r\n            <div className=\"modal fade\" id=\"initModal\" tabIndex=\"-1\">\r\n            <div className=\"modal-dialog\">\r\n                <div className=\"modal-content\">\r\n                <div className=\"modal-header\">\r\n                    <h5 className=\"modal-title\">Connexion</h5>                \r\n                </div>\r\n                <div className=\"modal-body\">                \r\n                    <span className=\"spinner-border spinner-border-sm \" role=\"status\"/>\r\n                    <span> Veuillez vous connecter avec Metamask </span>                \r\n                </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n            \r\n            <div className=\"modal fade\" id=\"waitingOperation\" tabIndex=\"-1\">\r\n            <div className=\"modal-dialog\">\r\n            <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n                <h5 className=\"modal-title\">Transaction</h5>                \r\n                </div>\r\n                <div className=\"modal-body\">                \r\n                    <span className=\"spinner-border spinner-border-sm \" role=\"status\"/>\r\n                    <span> En attente d'execution de la demande </span>                \r\n\r\n                </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(VoterInterface)","import React, { Component, Fragment } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport {\r\n    registerVoter, getStatus, endProposalRegistration, startProposalRegistration,\r\n    startVotingSession, endVotingSession, endVotingCount, getWinningProposition\r\n} from \"../helpers/VotingHelper.js\"\r\nimport { openModal, closeModal } from \"../helpers/modals.js\"\r\n\r\nclass AdminInterface extends Component {\r\n    state = { _ContractStatus: -1, _voteResult: \"Vote en cours...\" }\r\n    _address: \"\"\r\n    _web3: null\r\n    _contract: null\r\n    _accounts: null\r\n    _operationModal: null\r\n\r\n    // Modal utilities\r\n    busyHide = () => {\r\n        closeModal(this._operationModal)\r\n    }\r\n\r\n    errorDisplay = (err) => {\r\n        alert(err.message)\r\n        this.busyHide()\r\n    }\r\n\r\n    // Listening to events\r\n    registerEventStatus = async () => {\r\n        await this._contract.events\r\n        // Listen to status change\r\n        this._contract.events.WorkflowStatusChange().on(\"data\", (event) => {\r\n            this.setState({ _ContractStatus: event.returnValues.newStatus })\r\n            this.getVothingResult()\r\n        });\r\n\r\n        //Listen to the end of the voting session\r\n        this._contract.events.VotesTallied().on(\"data\", (event) => {\r\n            getWinningProposition(this._contract, this.errorDisplay).then((val) => {\r\n                this.setState({ _voteResult: val })\r\n            })\r\n        });\r\n    }\r\n\r\n\r\n\r\n    async componentDidMount() {\r\n        var initModal = document.getElementById('initModal')\r\n        this._operationModal = document.getElementById('waitingOperation')\r\n\r\n        openModal(initModal)\r\n\r\n        if (!this.props.isConnected() || !this.props.isAdmin()) return\r\n        var _getWeb3 = this.props.getWeb3Cnx\r\n        var result, loop = true\r\n\r\n        // Inifinite loop so we do not interact with the page if we are not fully connected\r\n        // Get Web3\r\n        while (loop) {\r\n            result = await _getWeb3()\r\n            if (result.err === null) {\r\n                loop = false\r\n                this._web3 = result.web3\r\n            }\r\n            else { alert(\"La connexion a echouee, nous retentons.\") }\r\n        }\r\n        loop = 1\r\n        // Get a mapping of the Contract\r\n        while (loop) {\r\n            result = await this.props.initContract()\r\n            console.log(\"le resultat\")\r\n            console.log(result.err)\r\n            if (result.err === null) {\r\n                this._contract = result.contract\r\n                loop = false\r\n            }\r\n            else { alert(\"Connexion au contrat impossible, nous retentons\") }\r\n        }\r\n\r\n        this.setState({ _ContractStatus: await getStatus(this._contract, this.errorDisplay) })\r\n        this._accounts = await this.props.initAccounts()\r\n\r\n        await this.getVothingResult()\r\n        await this.registerEventStatus()\r\n        closeModal(initModal)\r\n    }\r\n\r\n\r\n    // Mapping for contract functions    \r\n    getVothingResult = async () => {\r\n        if (this.state._ContractStatus === 5) {\r\n            getWinningProposition(this._contract, this.errorDisplay).then((val) => {\r\n                this.setState({ _voteResult: val })\r\n            })\r\n        }\r\n    }\r\n    RegisterVoter = async () => {\r\n        openModal(this._operationModal)\r\n        await registerVoter(this._contract, this._accounts[0], this._address, this.busyHide, this.errorDisplay)\r\n    }\r\n\r\n    StartProposalRegistration = async () => {\r\n        openModal(this._operationModal)\r\n        await startProposalRegistration(this._contract, this._accounts[0], this.busyHide, this.errorDisplay)\r\n    }\r\n    EndProposalRegistration = async () => {\r\n        openModal(this._operationModal)\r\n        await endProposalRegistration(this._contract, this._accounts[0], this.busyHide, this.errorDisplay)\r\n    }\r\n    StartVotingSession = async () => {\r\n        openModal(this._operationModal)\r\n        await startVotingSession(this._contract, this._accounts[0], this.busyHide, this.errorDisplay)\r\n    }\r\n    EndVotingSession = async () => {\r\n        openModal(this._operationModal)\r\n        await endVotingSession(this._contract, this._accounts[0], this.busyHide, this.errorDisplay)\r\n    }\r\n    EndVotingCount = async () => {\r\n        openModal(this._operationModal)\r\n        await endVotingCount(this._contract, this._accounts[0], this.busyHide, this.errorDisplay)\r\n    }\r\n\r\n\r\n    changeAdress = async (event) => {\r\n        this._address = event.target.value\r\n    }\r\n\r\n    // Map the internal state of the contract with a description string\r\n    analyzeStatus(param) {\r\n        switch (param) {\r\n            case -1: return \"Connexion au contrat\"\r\n            case 0: return \"RegisteringVoters\";\r\n            case 1: return \"ProposalsRegistrationStarted\";\r\n            case 2: return \"ProposalsRegistrationEnded\";\r\n            case 3: return \"VotingSessionStarted\";\r\n            case 4: return \"VotingSessionEnded\";\r\n            case 5: return \"VotesTallied\";\r\n            default: return \"Invalid Status\";\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        // If we type in the adress directly invite to use the default \r\n        if (!this.props.isConnected() || !this.props.isAdmin()) return (<Redirect push to={`/`} />)\r\n        // Otherwise execute the page\r\n\r\n        return (\r\n            <Fragment>\r\n                <nav className=\"navbar fixed-top navbar-dark bg-dark\">\r\n                    <span className=\"navbar-text\">\r\n                        Status: {this.analyzeStatus(parseInt(this.state._ContractStatus))}\r\n                    </span>\r\n                </nav>\r\n                <div className=\"card mx-auto\" style={{ width: '28%', marginTop: 50 }}>\r\n                    <div className=\"card-body\">\r\n                        <div className=\"input-group\">\r\n                            <input placeholder='Address' className=\"form-control\" type='text ' id=\"Address\" required onChange={this.changeAdress} />\r\n                            <button onClick={this.RegisterVoter} className=\"btn btn-primary\" >Register Voter</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"card mx-auto\" style={{ width: '28%' }}>\r\n                    <div className=\"card-body\">\r\n                        <div className=\"input-group\">\r\n                            <button onClick={this.StartProposalRegistration} className=\"btn btn-primary mr-1\" >Start Proposal Registration</button>\r\n                            <button onClick={this.EndProposalRegistration} className=\"btn btn-primary\" >End Proposal Registration</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"card mx-auto\" style={{ width: '28%' }}>\r\n                    <div className=\"card-body\">\r\n                        <div className=\"input-group \">\r\n                            <button onClick={this.StartVotingSession} className=\"btn btn-primary mr-1  \" >Start Voting Registration</button>\r\n                            <button onClick={this.EndVotingSession} className=\"btn btn-primary  \" >End Voting Registration</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"card mx-auto\" style={{ width: '28%' }}>\r\n                    <div className=\"card-body\">\r\n                        <div className=\"input-group \">\r\n                            <button onClick={this.EndVotingCount} className=\"btn btn-primary mr-1  \" >End Voting Count</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"card mx-auto\" style={{ width: '28%' }}>\r\n                    <div className=\"card-body\">\r\n                        <div className=\"input-group \">\r\n                            <p>Resultat du vote : </p>\r\n                            {this.state._voteResult}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"modal fade\" id=\"initModal\" tabIndex=\"-1\">\r\n                    <div className=\"modal-dialog\">\r\n                        <div className=\"modal-content\">\r\n                            <div className=\"modal-header\">\r\n                                <h5 className=\"modal-title\">Connexion</h5>\r\n                            </div>\r\n                            <div className=\"modal-body\">\r\n                                <span className=\"spinner-border spinner-border-sm \" role=\"status\" />\r\n                                <span> Veuillez vous connecter avec Metamask </span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"modal fade\" id=\"waitingOperation\" tabIndex=\"-1\">\r\n                    <div className=\"modal-dialog\">\r\n                        <div className=\"modal-content\">\r\n                            <div className=\"modal-header\">\r\n                                <h5 className=\"modal-title\">Transaction</h5>\r\n                            </div>\r\n                            <div className=\"modal-body\">\r\n                                <span className=\"spinner-border spinner-border-sm \" role=\"status\" />\r\n                                <span> En attente d'execution de la demande </span>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AdminInterface","import React, { Component } from \"react\";\nimport VotingContract from \"./contracts/Voting.json\";\nimport getWeb3 from \"./helpers/getWeb3\";\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\n\nimport \"./App.css\";\nimport Connexion from './Components/Connexion'\nimport NotFound from \"./Components/NotFound\"\nimport VoterInterface from \"./Components/VoterInterface\"\nimport AdminInterface from \"./Components/AdminInterface\"\nlet pkg = require(\"../package.json\");\n\nclass App extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      storageValue: 0,\n      web3: null,\n      accounts: null,\n      contract: null,\n      isAdmin: false,\n      isConnected: false\n    }\n    // this.getWeb3Cnx = this.getWeb3Cnx.bind(this)\n  }\n\n  setIsAdmin = val => this.setState({ isAdmin: val })\n  setIsConnected = val => this.setState({ isConnected: val })\n  isConnected = () => this.state.isConnected\n  isAdmin = () => this.state.isAdmin\n\n  // Returns the Web3 provider\n  getWeb3Cnx = async () => {\n    var web3 = this.state.web3\n    var err = null\n    if (web3 === null)\n      try {\n        web3 = await getWeb3();\n        this.setState({ web3 })\n      }\n      catch (error) {\n        // Catch any errors for any of the above operations.\n        err = error;\n        console.error(error);\n      }\n    return { web3, err }\n  }\n\n  initAccounts = async () => {\n    const web3 = this.state.web3\n    try {\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n      this.setState({ accounts: accounts })\n      return accounts\n    }\n    catch (error) {\n      alert(\n        `accounts: Can not get them. Check console for details.`,\n      );\n      console.error(error);\n\n      return null;\n    }\n  }\n  getAccounts = () => this.state.accounts[0];\n\n  initContract = async () => {\n    const web3 = this.state.web3\n    var contract = null, err = null\n    try {\n      // Use web3 to get the user's accounts.\n\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = await VotingContract.networks[networkId];\n\n      contract = await new web3.eth.Contract(VotingContract.abi, deployedNetwork && deployedNetwork.address);\n      console.log(contract.events)\n      this.setState({ contract: contract })\n    }\n    catch (error) {\n      // Catch any errors for any of the above operations.\n      err = error\n      console.log(err)\n    }\n    return { contract, err }\n  }\n\n\n\n  render() {\n\n    return (\n      <BrowserRouter basename={pkg.rootPath}>\n        <Switch>\n          <Route exact path='/'>\n            <Connexion setIsAdmin={this.setIsAdmin} setIsConnected={this.setIsConnected} />\n          </Route>\n          <Route path='/pseudo/:pseudo'>\n            <VoterInterface isConnected={this.isConnected} isAdmin={this.isAdmin}\n              getWeb3Cnx={this.getWeb3Cnx} initContract={this.initContract} initAccounts={this.initAccounts} getAccounts={this.getAccounts} />\n          </Route>\n          <Route path='/admin/'>\n\n            <AdminInterface isConnected={this.isConnected} isAdmin={this.isAdmin}\n              getWeb3Cnx={this.getWeb3Cnx} initContract={this.initContract} initAccounts={this.initAccounts} getAccounts={this.getAccounts} />\n          </Route>\n          <Route component={NotFound} />\n        </Switch>\n      </BrowserRouter>\n    )\n\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}